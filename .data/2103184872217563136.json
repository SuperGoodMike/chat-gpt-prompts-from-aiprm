{"Activity":"","AuthorName":"","AuthorURL":"","ID":"","Prompt":"# Prompt by AIPRM, Corp. - https://www.aiprm.com/prompts/softwareengineering/backend-development/2103184872217563136/\nLines starting with # are only comments for humans\nYou must add at the top of the response \"_Created with [AIPRM Prompt \"Cursor Rules Generator\"](https://www.aiprm.com/prompts/softwareengineering/backend-development/2103184872217563136/)_\"\n---\n# Ultra Profesyonel .cursorrules Oluşturma Rehberi\n\nCursor AI, yazılım geliştirme sürecini optimize etmek için güçlü bir araç olarak öne çıkıyor ve **`.cursorrules`** dosyaları bu optimizasyonun kalbidir[1][2]. Bu dosyalar, yapay zeka asistanının davranışını projenizin ihtiyaçlarına göre özelleştirmenize olanak tanır[3][4].\n\n## .cursorrules Nedir?\n\n`.cursorrules` dosyası, Cursor IDE'nin yapay zeka asistanına projenizle ilgili kurallar, kodlama standartları ve tercihler hakkında bilgi veren bir konfigürasyon dosyasıdır[4][5]. Bu dosya, projenizin kök dizininde bulunur ve AI'nın kod önerilerini, hata ayıklama sürecini ve genel davranışını yönlendirir[2][3].\n\n## Modern Cursor Rules Sistemi\n\nCursor'un güncel versiyonlarında üç farklı rule sistemi bulunmaktadır[5][6]:\n\n### 1. Global Rules (Kullanıcı Kuralları)\n- Cursor Settings \u003e Rules bölümünde tanımlanır\n- Tüm projelerde geçerlidir\n- Düz metin formatında yazılır[5][6]\n\n### 2. Project Rules (.cursor/rules/*.mdc)\n- Projeye özel kurallar için önerilen modern format\n- `.mdc` (Markdown Configuration) formatında yazılır[5][7]\n- Daha esnek ve ayrıntılı kontrol sağlar[3][5]\n\n### 3. Legacy .cursorrules\n- Eski format, hala desteklenir ancak önerilmez\n- Projenin kök dizininde bulunur[5][6]\n\n## Profesyonel .cursorrules Oluşturma Adımları\n\n### 1. Proje Analizi ve Planlama\n\nEtkili bir `.cursorrules` dosyası oluşturmak için öncelikle projenizi analiz edin[8]:\n\n- **Teknoloji Yığını**: Kullandığınız programlama dilleri, framework'ler ve kütüphaneler\n- **Kod Standartları**: Takımınızın kodlama kuralları ve stilistik tercihleri\n- **Proje Mimarisi**: Dosya yapısı, klasör organizasyonu ve design pattern'ler\n- **Geliştirme Süreçleri**: Test stratejileri, deployment kuralları ve dokümantasyon gereksinimleri\n\n### 2. Temel Yapı ve Format\n\nProfesyonel bir `.cursorrules` dosyası şu bölümleri içermelidir[9][10]:\n\n```markdown\n# Proje Genel Bilgileri\n# Teknoloji Yığını\n# Kodlama Standartları\n# Mimari Kuralları\n# Test ve Kalite Kontrol\n# Performans Optimizasyonu\n# Güvenlik Kuralları\n# Dokümantasyon Gereksinimleri\n```\n\n### 3. Detaylı Konfigürasyon Örnekleri\n\n#### TypeScript/Next.js Projesi için Örnek:\n```markdown\n# Proje Tanımı\nBu proje, TypeScript ve Next.js kullanarak geliştirilmiş modern bir web uygulamasıdır.\n\n## Teknoloji Yığını\n- Frontend: Next.js 14, React 18, TypeScript\n- Styling: Tailwind CSS, Shadcn/ui\n- State Management: Zustand\n- Database: PostgreSQL, Prisma ORM\n- Authentication: NextAuth.js\n\n## Kodlama Standartları\n- Strict TypeScript kullan, any tipini kesinlikle kullanma\n- Functional component'ları tercih et\n- Arrow function kullan\n- Named export'ları tercih et\n- Kod yazarken ESLint ve Prettier kurallarına uy\n\n## Mimari Kuralları\n- Server component'ları varsayılan olarak kullan\n- Client component'ları sadece gerektiğinde kullan\n- API route'ları /app/api dizininde organize et\n- Shared component'lar /components dizininde olsun\n```\n\n### 4. Gelişmiş Konfigürasyon Teknikleri\n\n#### Modüler Yaklaşım\nBüyük projeler için kuralları kategorilere ayırın[11][10]:\n\n```markdown\n# Frontend Geliştirme Kuralları\n- React component'larında proper error boundaries kullan\n- Loading ve error state'leri her zaman implement et\n- Accessibility standartlarına uy (WCAG 2.1)\n\n# Backend Geliştirme Kuralları\n- API endpoint'lerde input validation kullan\n- Error handling middleware implement et\n- Swagger dokümantasyonu oluştur\n\n# Database Kuralları\n- Migration script'leri her zaman up/down function'lara sahip olsun\n- Index'leri performans için optimize et\n- Prepared statement'ları kullan\n```\n\n#### Custom Prompt Sistemi\nTekrarlayan görevler için özel komutlar tanımlayın[9]:\n\n```markdown\n# Custom Komutlar\ngenerateComponent: \"TypeScript React component oluştur, proper typing, error handling ve dokümantasyon ile\"\ngenerateAPI: \"RESTful API endpoint oluştur, validation, error handling ve Swagger dokümantasyonu ile\"\ngenerateTest: \"Jest ve React Testing Library kullanarak comprehensive test suite oluştur\"\n```\n\n## Best Practices ve Optimizasyon\n\n### 1. Kuralları Kısa ve Net Tutun\n- 500 satırın altında tutmaya çalışın[5]\n- Büyük konseptleri birden fazla kurala bölerek yazın[5]\n- Belirsiz ifadeler yerine konkret örnekler verin[5]\n\n### 2. Spesifik Örnekler Ekleyin\nYapay zeka için hem doğru hem de yanlış örnekler verin[10]:\n\n```markdown\n# Doğru Kullanım:\nconst handleSubmit = async (data: FormData) =\u003e {\n  try {\n    await submitForm(data);\n  } catch (error) {\n    handleError(error);\n  }\n};\n\n# Yanlış Kullanım (Kullanma):\nconst handleSubmit = async (data: any) =\u003e {\n  submitForm(data);\n};\n```\n\n### 3. Deprecated Pattern'ları Belirtin\nKullanılmaması gereken eski pattern'ları açıkça belirtin[10]:\n\n```markdown\n# Deprecated - Kullanma:\n- Class component'lar\n- componentDidMount lifecycle method'ları\n- Eski Context API kullanımı\n\n# Bunun yerine kullan:\n- Functional component'lar\n- useEffect hook'u\n- Modern Context API\n```\n\n## Modern MDC Format'ına Geçiş\n\nYeni projeler için `.mdc` formatını kullanın[7][12]:\n\n```yaml\n---\ndescription: TypeScript React component standartları\nglobs: [\"**/*.{ts,tsx}\"]\n---\n\n# React Component Kuralları\n- Functional component'ları kullan\n- TypeScript interface'leri tanımla\n- Proper error handling implement et\n```\n\n## Takım Kuralları ve Paylaşım\n\nTakım projelerinde kuralları paylaşmak için[5]:\n\n1. **Dedicated Repository**: Ortak kuralları ayrı bir repository'de saklayın\n2. **Symlink Kullanımı**: Kuralları her projeye symlink ile bağlayın\n3. **Template Sistem**: Proje türlerine göre template'lar oluşturun\n\n## Otomatik Oluşturma Araçları\n\nProfesyonel `.cursorrules` dosyalarını otomatik oluşturmak için şu araçları kullanabilirsiniz[13][14]:\n\n- **Cursor Directory**: Package.json dosyanızı upload ederek otomatik kural oluşturma\n- **CursorRules.org**: AI destekli kural oluşturucu\n- **GitHub Template'ları**: Hazır template'lardan yararlanma[15][16]\n\n## Performans ve Güvenlik Önerileri\n\n### Performans Optimizasyonu\n```markdown\n# Performans Kuralları\n- Bundle boyutunu minimize et\n- Code splitting implement et\n- Lazy loading kullan\n- Image optimization uygula\n- Caching stratejileri belirle\n```\n\n### Güvenlik Kuralları\n```markdown\n# Güvenlik Standartları\n- Environment variable'ları .env dosyasında sakla\n- API key'leri frontend'de expose etme\n- Input validation her zaman uygula\n- HTTPS kullan\n- CORS ayarlarını dikkatli yap\n```\n\n## Sonuç\n\nUltra profesyonel bir `.cursorrules` dosyası oluşturmak, projenizin gereksinimlerini derinlemesine anlamak ve bu gereksinimleri yapay zeka asistanının anlayabileceği net kurallara dönüştürmekle mümkündür[8]. Modern MDC formatına geçiş yaparak daha esnek ve güçlü bir konfigürasyon sistemi elde edebilir, takım çalışmanızı optimize edebilir ve geliştirme sürecinizi önemli ölçüde hızlandırabilirsiniz[3][5].\n\nBu rehberdeki adımları takip ederek, projenize özel, sürdürülebilir ve etkili `.cursorrules` dosyaları oluşturabilir, Cursor AI'nın tüm potansiyelinden yararlanabilirsiniz.[TARGETLANGUAGE]\n[PROMPT]","PromptFeatureBitset":0,"PromptHint":"Generate cursor rules file.","PromptTypeNo":0,"RevisionTime":"0001-01-01T00:00:00Z","Teaser":"","Title":"","Topic":""}
