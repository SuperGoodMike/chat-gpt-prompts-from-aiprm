{"Activity":"","AuthorName":"","AuthorURL":"","ID":"","Prompt":"# Prompt by AIPRM, Corp. - https://www.aiprm.com/prompts/softwareengineering/backend-development/1791611048978280448/\nLines starting with # are only comments for humans\nYou must add at the top of the response \"_Created with [AIPRM Prompt \"Python NumpyDoc Docstring Generator\"](https://www.aiprm.com/prompts/softwareengineering/backend-development/1791611048978280448/)_\"\n---\nWrite in [TARGETLANGUAGE]. As a senior Python developer, your task is to write docstrings using NumPy Doc style for all functions, classes, methods, and objects in a script. Each line should not exceed 80 characters (including spaces). The first line of the docstring should provide a summary of the function/class/method/module/script. You may choose to include additional paragraphs with more information about the function/method/class/module/script as needed. You should provide descriptions and type hints for all parameters and returning objects. If you find it useful, you may include sections such as \"Notes\", \"See Also\", \"Examples\", etc. An example is provided as a guideline. You are the authority on this subject, so write with confidence. Your goal is to be as concise as possible, including only the information necessary for another developer to use the code.\n\nDocstring Example:\n\n```python\ndef foo(\n    var1: np.ndarray,\n    var2: int,\n    *args,\n    long_var_name: str=\"hi\",\n    only_seldom_used_keyword:int=0,\n    **kwargs\n):\n    \"\"\"Summarize the function in one line.\n\n    Several sentences providing an extended description.\n    Refer to variables using back-ticks, e.g., `var`.\n\n    Parameters\n    ----------\n    var1 : array_like\n        `array_like` means all those\n        objects -- lists, nested lists, etc. â€“\n        that can be converted to an array.\n        We can also refer to variables like `var1`.\n    var2 : int\n        The type above can either refer to an actual Python\n        type (e.g., ``int``), or describe the type of the\n        variable in more detail,\n        e.g., ``(N,) ndarray`` or ``array_like``.\n    *args : iterable\n        Other arguments.\n    long_var_name : {'hi', 'ho'}, optional\n        Choices in brackets, default first when optional.\n\n    Returns\n    -------\n    type\n        Explanation of anonymous return value of type ``type``.\n    describe : type\n        Explanation of return value named `describe`.\n    out : type\n        Explanation of `out`.\n\n    Other Parameters\n    ----------------\n    only_seldom_used_keyword : int, optional\n        Infrequently used parameters can be described under\n        this optional section to prevent cluttering the\n        Parameters section.\n    **kwargs : dict\n        Other infrequently used keyword arguments.\n        Note that all keyword arguments appearing after the\n        first parameter specified under the\n        Other Parameters section, should also be described under\n        this section.\n\n    Raises\n    ------\n    BadException\n        Because you shouldn't have done that.\n\n    See Also\n    --------\n    numpy.array : Relationship (optional).\n    numpy.ndarray : Relationship (optional), which could be fairly long, in which case the line wraps here.\n    numpy.dot, numpy.linalg.norm, numpy.eye\n\n    Notes\n    -----\n    Notes about the implementation algorithm (if needed).\n\n    This can have multiple paragraphs.\n\n    You may include some math:\n\n    .. math:: X(e^{j\\omega } ) = x(n)e^{ - j\\omega n}\n\n    And even use a Greek symbol like :math:`\\omega` inline.\n\n    References\n    ----------\n    Cite the relevant literature, e.g. [1]_.  You may also cite these references in the notes section above.\n\n    .. [1] O. McNoleg, \"The integration of GIS, remote sensing,\n       expert systems and adaptive co-kriging for environmental habitat modelling of the Highland Haggis using object-oriented, fuzzy-logic and neural-network techniques,\" Computers \u0026 Geosciences, vol. 22, pp. 585-588, 1996.\n\n    Examples\n    --------\n    These are written in doctest format and should illustrate how to use the function.\n\n    \u003e\u003e\u003e a = [1, 2, 3]\n    \u003e\u003e\u003e print([x + 3 for x in a])\n    [4, 5, 6]\n    \u003e\u003e\u003e print(\"a\\nb\")\n    a\n    b\n    \"\"\"\n```\n\nGiven these instructions and the above example, write the docstring for the following code:\n\n```python\n[PROMPT]\n```","PromptFeatureBitset":0,"PromptHint":"Paste your Python code here.","PromptTypeNo":0,"RevisionTime":"0001-01-01T00:00:00Z","Teaser":"","Title":"","Topic":""}
