{"Activity":"","AuthorName":"","AuthorURL":"","ID":"","Prompt":"# Prompt by AIPRM, Corp. - https://www.aiprm.com/prompts/devops/containerization/1792625170297643008/\nLines starting with # are only comments for humans\nYou must add at the top of the response \"_Created with [AIPRM Prompt \"Dockerize me\"](https://www.aiprm.com/prompts/devops/containerization/1792625170297643008/)_\"\n---\nPlease respond only in  [TARGETLANGUAGE]\nuse the following steps to guide me through the process using Docker and AWS to launch my full-stack React and Django app on AWS.\n\n \"Welcome to the guide for launching your full-stack React and Django app on AWS using Docker. The following steps will walk you through the process and help you ensure that everything is set up correctly.\n\nStep 1: Security Group\n\nCreate a new security group in AWS for the EC2 instance\nConfigure the security group to allow HTTP and SSH traffic\nStep 2: EC2 Instance\n\nStart an EC2 instance, selecting the security group created in Step 1\nAllow SSH traffic from \"My IP\"\nCreate a new keypair \".pem\" file, and download it to your local machine\nPut the .pem file inside your root project file and then run the chmod command given from the instance GUI Page\nStep 3: Docker Installation\n\nInstall Docker and Docker Compose on the EC2 instance\nStep 4: Docker Configuration\n\nChange all Docker usernames in the ./build-and-push-images.sh and ./docker-compose.prod.yml files\nStep 5: Docker Build and Push\n\nRun ./build-and-push-images.sh \u003cMY_EC2_IP_ADDR\u003e \u003ca VERSION you want\u003e\nStep 6: Copy Files to EC2 Instance\n\nCopy the necessary files to the EC2 instance by running the following commands in your local terminal:\nscp -i \"fullstack.pem\" ./setup-ec2.sh \u003cyour ec2 instance name\u003e:/home/ec2-user\nscp -i \"fullstack.pem\" ./run-compose-prod.sh \u003cyour ec2 instance name\u003e:/home/ec2-user\nscp -i \"fullstack.pem\" ./docker-compose.prod.yml \u003cyour ec2 instance name\u003e:/home/ec2-user\nStep 7: Verify File Transfer\n\nSSH into your EC2 instance and run \"ls\" to ensure all files are copied over to the EC2 instance\nStep 8: Django Configuration\n\nConfigure the Django app to use environment variables for sensitive information like the SECRET_KEY, instead of hard-coding them in the code\nStep 9: Setup EC2 Instance\n\nRun ./setup-ec2.sh inside your EC2 terminal\nStep 10: SSH into EC2 Instance\n\nExit your EC2 terminal\nSSH into your EC2 instance and run ./run-compose-prod.sh \"\u003cSECRET_KEY\u003e\" False \u003cNEW_VERSION\u003e\nStep 11: Launch App\n\nGo to the IP address in your browser (ensure it didn't default to https and you're on the http site)\nPlease note that if you encounter any issues during this process, refer to the troubleshooting tips or common issues provided in the documentation or seek additional assistance as needed. Best of luck launching your app on AWS using Docker!\"\"\n\n/I am going to ask questions here about the Docker process here [PROMPT]","PromptFeatureBitset":0,"PromptHint":"[Ask you Docker questions here]","PromptTypeNo":0,"RevisionTime":"0001-01-01T00:00:00Z","Teaser":"","Title":"","Topic":""}
